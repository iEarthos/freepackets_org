:Author:    hecke
:Email:     hecke _AT_ freepackets.org
:Date:      15.02.2014
:Revision:  0.0 / initial
:toc:

== system setup

NOTE: Setting up the serial connection to the router is a good idea. It will save
you a lot of time if dropbear dies or the network config is corrupted at all.

Expected environment: OpenWRT kamikaze on the WRT54GL, ssh is working.

==folder structure

----
private 
|  |
|  |-- password.txt -> username/password used for auth@VPN
|  |-- openvpn.ovpn -> VPN config
|  |-- system.conf  -> system config (ap ssid / ap password)
|
wrt54gl
|-add2distro        -> contains files to be change or added in/to the firmware
|  |
|  |--CONTROL       -> the package generator control file
|
|-doc               -> platform specific documentation
|-package           -> contains the freepackets_wrt54gl.ipk
|-tools             -> development and build scripts 
|  |
|  |-- dev_key      -> ssh developer keys
|
|-firmware          -> firmware builder
   |
   |--OpenWrt-ImageBuilder-brcm47xx-for-Linux-i686
        |
        |--bin
             |--brcm47xx - contains firmware images after build
----

== configuration

See toplevel README.

== build the package

The package contains all script and config files needed to run the access point
(for a list of used files have a look at tools/setup_wrt54gl.sh).

Just run __build_package.sh__ in the root folder. The freepackets_wrt54gl.ipk is 
build in the folder package. The package name is freepackets-wrt54gl.

If you are going to install it right now, use:
----
opkg install freepackets_wrt54gl.ipk --force-maintainer
----
The __--force-maintainer__ is needed cause the package replaces some stock
config files. After that: reboot.

== build and flash the firmware image without the freepackets_wrt54gl.ipk included

This builds a bare firmware containing all needed tools but no scripts and
config used to prepare and run the open accesspoint:
----
cd firmware/OpenWrt-ImageBuilder-brcm47xx-for-Linux-i686
make image PROFILE=Broadcom-b43 PACKAGES="base-files busybox crda dnsmasq dropbear firewall hotplug2 iptables iptables-mod-conntrack iptables-mod-nat iw kernel kmod-b43 kmod-b43legacy kmod-cfg80211 kmod-crc-ccitt kmod-crypto-aes kmod-crypto-arc4 kmod-crypto-core kmod-diag kmod-ipt-conntrack kmod-ipt-core kmod-ipt-nat kmod-ipt-nathelper kmod-mac80211 kmod-switch libc libgcc libip4tc libiwinfo libiwinfo-lua liblua libnl-tiny libuci libuci-lua libxtables lua luci luci-app-firewall luci-i18n-english luci-lib-core luci-lib-ipkg luci-lib-lmo luci-lib-nixio luci-lib-sys luci-lib-web luci-mod-admin-core luci-mod-admin-full luci-proto-core luci-sgi-cgi luci-theme-base luci-theme-openwrt mtd nvram opkg uci udevtrigger uhttpd wireless-tools wpad-mini openvpn kmod-tun libopenssl liblzo iptables-mod-ipopt ip iptables-mod-conntrack-extra -kmod-ppp -kmod-pppoe -luci-proto-ppp -ppp -ppp-mod-pppoe"
----

The relevant image __openwrt-brcm47xx-squashfs.trx__ is created in 
firmware/OpenWrt-ImageBuilder-brcm47xx-for-Linux-i686/bin/brcm47xx/.

Copy the openwrt-brcm47xx-squashfs.trx to the router:
----
scp openwrt-brcm47xx-squashfs.trx root@<router ip>:/tmp/
----

It seems the sysupgrade needs a lot of memory so kill all processes on the 
router not needed now:
----
killall -9 udhcpc ntpd klogd uhttpd dnsmasq hotplug2 syslogd dropbear
----
WARNING: Only kill dropbear if you are using a serial connection!

Then run:
----
sysupgrade /tmp/openwrt-brcm47xx-squashfs.trx
----

Wait until the router has rebooted.

== build and flash the firmware image including the freepackets_wrt54gl.ipk

Since the package folder is already added as a source in 
OpenWrt-ImageBuilder-brcm47xx-for-Linux-i686/repositories.conf, a firmware 
including the package freepackets-wrt54gl could be build by adding the 
package to the package list.

All this is done by the script __build_firmware.sh__. You can find the created
firmware images in the folder firmware. Flash the openwrt-brcm47xx-squashfs.trx
to the device as described in the section above...

== if the OOM killer catches in during flashing...

...the power LED starts blinking on power on and your router can't boot. 
But it is easy to recover cause the WRT54GL has a build in tftp server that 
starts on each boot. So you can connect to the router via a tftp client and 
write a new firmware...

NOTE: If you allready set the nvram settings for boot_wait_on and wait_time
(you can do this while the device is running) you can skip the part about
adding the serial port. Just start the tftp-client, run the commands including 
the put and switch the router off and on.

Now

0. stay cool
1. get a tftp client (apt-get install tftp) and put a original firmware image 
of the WRT54GL from Linksys OR a new openwrt firmware into the directory you
are working from (I used a .bin - eg. openwrt-wrt54g-squashfs.bin)
2. take your soldering iron and add a serial connection to the device
(see http://wiki.openwrt.org/toh/linksys/wrt54g#serial.port)
3. start the device
4. press control+C, you should get a command prompt:
----
....
Boot program checksum is invalid
Reading :: Failed.: Timeout occured
Reading :: Failed.: Timeout occured
CFE>
----
Run the following commands:
----
nvram set boot_wait=on
nvram set wait_time=10
nvram commit
----
5. connect to the router via one of its lan ports, your client must have
an IP address inside of 192.168.1.0/24 (but not 192.168.1.1 - that is used
by the router on startup)
6. send the firmware image to the router using the tftp client:
----
>tftp 192.168.1.1
tftp>mode binary
tftp>rexmt 1
tftp>timeout 120
tftp>trace
tftp>put openwrt-wrt54g-squashfs.bin
----
After pressing enter you will get 
----
...
sent WRQ <file=openwrt-wrt54g-squashfs.bin, mode=octet>
...
----
7. reboot the router by running 
----
CFE>reboot
----
or by just plug it off and on
8. the firmware is transferred to the router (~15 sec)
9. the firmware is programmed to the device - and that takes some time (~45 sec)
10. device reboots - everything is fine.


