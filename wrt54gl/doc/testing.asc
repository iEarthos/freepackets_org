:Author:    hecke
:Email:     hecke _AT_ freepackets.org
:Date:      15.02.2014
:Revision:  0.0 / initial
:toc:

== objective

This document describes some basic checks. They should be run after 
finishing a setup for a new plattform or after doing major changes.
Feel free to add more.

== testing

=== base system

.basic system configuration
[options="header"]
|=======================
|ctx|function      |how|passed
|basic system |routing table vpn is present |ip route show table vpn |
|basic system |eth0 present and up|ip a |
|basic system |eth0.0 present and up |ip a |
|basic system |eth0.1 present and up |ip a |
|basic system |eth0.2 present / got addr from cable/dsl |ip a |
|basic system |radio0 present and up |ip a |
|basic system |br-lan_vpn present & addr 192.168.2.1 |ip a |
|basic system |br-lan_vpn contains eth0.0 and wlan0 |brctl show |
|basic system |br-lan_direct present & addr 192.168.3.1 |ip a |
|basic system |br-lan_direct contains eth0.1 |brctl show |
|=======================

=== startup

.system startup
[options="header"]
|=======================
|ctx|function      |how |passed
|startup      |/etc/firewall.user is executed | | 
|init.d/vpn start  |/usr/sbin/vpn_shepherd is executed as background job | ps |
|init.d/vpn start  |/usr/sbin/vpn_led is executed as background job | ps |
|init.d/vpn stop  |/usr/sbin/vpn_shepherd is killed | ps |
|init.d/vpn stop  |/usr/sbin/vpn_led  is killed | ps |
|startup      |init script /etc/init.d/vpn executed | ps |
|=======================

NOTE: enable/disbale persistent startup of vpn init script by running
/etc/init.d/vpn enable | disable

=== openvpn watchdog script

.vpn shepherd
[options="header"]
|=======================
|ctx |function      |how |passed
|vpn_shepherd |executes openvpn | vpn_shepherd &; pidof openvpn or ps | 
|vpn_shepherd |restarts openvpn | vpn_shepherd &; kill $(pidof openvpn) -> logread -f must contain "openvpn died <n> times", after max. 10 seconds openvpn must be restarted | 
|vpn_shepherd |kills openvpn on exit | kill $(pidof vpn_shepherd) -> log should contain notice /usr/sbin/vpn_shepherd killed, pidof openvpn must not return anything |
|=======================

=== status led

.status signaling
[options="header"]
|=======================
|ctx |function      |how |passed
|vpn_led    |led CISCO-white on if openvpn is running | start vpn_shepherd, pidof openvpn \| wc -l must return 1 |
|vpn_led    |led CISCO-white off if openvpn is not running | stop vpn_shepherd |
|vpn_led    |led DMZ on if openvpn is running and client routing over vpn connection |  enable vpn mode for public subnet (button & logread -f) and run pidof openvpn \| wc -l must return 1 |
|vpn_led    |led DMZ blinking if openvpn is NOT running and client routing over vpn connection | enable vpn mode for public subnet (button & logread -f) and run killall openvpn on the router|
|vpn_led    |led DMZ off if client routing over direct connection | enable direct connection (button & logread -f) |
|vpn_led    |led CISCO-orange off if no wireless clients connected | make sure there is no connection to the AP via WLAN |
|vpn_led    |led CISCO-orange on if wireless clients connected | connect to the AP via WLAN |
|=======================

NOTE: inactivity timeout for WLAN clients is ~300 seconds so it may take 
5 minutes after the last connection to the AP till the orange LED goes off.
Check with iw dev wlan0 station dump | grep inactive

=== openvpn

.openvpn
[options="header"]
|=======================
|ctx|function      |how|passed
|openvpn      |create and config tun0 | ip addr show tun0 |
|openvpn      |does not create any routes | ip route show should not contain any routes to the subnet used by the tun0 device (see example output below) |
|openvpn      |executes /usr/sbin/vpn_up on startup | logread must contain entry like "openvpn routing setup tun0@10.129.83.62<-PtP->10.129.83.61" |
|openvpn      |executes /usr/sbin/vpn_down on exit | logread must contain entry "running cleanup for openvpn" | 
|openvpn      |connects to vpn service and creates tunnel | logread, openvpn start must end with "Initialization Sequence Completed" |
|vpn_up	      |create routing entries in table vpn | ip route show table vpn (see example output below) |
|vpn_up	      |executes public_net_vpn | logread contains entry "route public subnet over vpn connection" |
|vpn_down     |delete routing entries in table vpn | ip route show table vpn must return empty table | 
|vpn_down     |executes public_net_vpn | logread contains entry "route public subnet over vpn connection" |
|=======================

without started openvpn the routing table should look like this:
----
ip route show
192.168.3.0/24 dev br-lan_direct  proto kernel  scope link  src 192.168.3.1
192.168.2.0/24 dev br-lan_vpn  proto kernel  scope link  src 192.168.2.1
192.168.1.0/24 dev eth0.2  proto kernel  scope link  src 192.168.1.100
default via 192.168.1.23 dev eth0.2
----

example output for vpn routing entries:
----
ip route show table vpn
10.129.83.61 dev tun0  proto kernel  scope link  src 10.129.83.62
0.0.0.0/1 via 10.129.83.62 dev tun0
128.0.0.0/1 via 10.129.83.62 dev tun0
----

=== public network route switching

.public network routing
[options="header"]
|=======================
|ctx|function      |how|passed
|route switch button  | /etc/hotplug.d/button/buttons is executed on button press | depending on first state logread -f shows alternating "route public subnet over direct connection" and "route public subnet over vpn connection" |
|route switch button  | on button press it calls alternating public_net_vpn and public_net_direct | logread -f |
|public_net_vpn  | creates /var/lock/public_net_vpn and deletes /var/lock/public_net_direct | ls /var/lock/ |
|public_net_vpn  | entry in chain masq to masquerade all but 192.168.2.0/24 on eth0.2(wan) | iptables -L -t nat -v, see output below |
|public_net_vpn  | entry in chain masq to masquerade all form 192.168.2.0/24 on tun0 (vpn tunnel) | iptables -L -t nat -v, see output below |
|public_net_vpn  | add ip rule for marked packets (fwmark 23) to use routing table vpn | ip rule show, see sample output below |
|public_net_vpn  | only one rule for marked packets (fwmark 23) is present |  ip rule show \| grep "fwmark 0x17" \| wc -l must return 1 |
|public_net_direct | creates /var/lock/public_net_direct and deletes /var/lock/public_net_vpn | ls /var/lock/ |
|public_net_direct  | entry in chain masq to masquerade all on eth0.2 (wan) | iptables -L -t nat -v, see output below  |
|public_net_vpn  | no specific masq rule for 192.168.2.0/24 | iptables -L -t nat -v |
|public_net_vpn  | add ip rule for marked packets (fwmark 23) to use routing table main | ip rule show, see sample output below |
|public_net_vpn  | only one rule for marked packets (fwmark 23) is present | ip rule show \| grep "fwmark 0x17" \|  wc -l must return 1 |
|route switch button | if mode is vpn -> public net client uses tunnel connection | on client in public subnet, lynx mylocation.freepackets.org -> output must show exitpoint @ tunnel endpoint (eg. Sweden, see sample output below) |
|route switch button | if mode is direct -> public net client uses direct connection | on client in public subnet, lynx mylocation.freepackets.org -> output must show exitpoint using local provider (see sample output below) |
|=======================

masquerade entries for mode public subnet uses vpn tunnel:
----
iptables -L -t nat -v
Chain masq (1 references)
pkts bytes target     prot opt in     out     source               destination
10   740 MASQUERADE  all  --  any    eth0.2 !192.168.2.0/24       anywhere
0     0 MASQUERADE  all  --  any    tun0    192.168.2.0/24       anywhere
----

output if ip rule for using routing table vpn for marked packets:
----
ip rule show
0:      from all lookup local
32765:  from all fwmark 0x17 lookup vpn
32766:  from all lookup main
32767:  from all lookup default
----

masquerade entries for mode public subnet uses direct connection:
----
iptables -L -t nat -v
Chain masq (1 references)
pkts bytes target     prot opt in     out     source               destination
0     0 MASQUERADE  all  --  any    eth0.2  anywhere             anywhere
----

output ip rule for using routing table main for marked packets:
----
ip rule show
0:      from all lookup local
32765:  from all fwmark 0x17 lookup main
32766:  from all lookup main
32767:  from all lookup default
----

output mylocation - using vpn tunnel:
----
{"ipNum":1334684167,"ipStr":"79.141.170.7","ipVer":4,"location":
{"ipRange":"79.141.170.0..79.141.170.255","countryCode":"SE","region":"26",
"city":"Bromma","postalCode":"","latitude":"59.35","longitude":"17.9167",
"metroCode":"","areaCode":""},"as":{"ipRange":"79.141.170.0..79.141.170.255",
"ASN":"251","company":"Kaia Global Networks Ltd."},"countryWhois":{"ipRange":
"79.141.170.0..79.141.170.255","countryCode":"SE","country":"Sweden"}}
----

output mylocation - using local provider:
----
{"ipNum":2988011086,"ipStr":"178.25.110.78","ipVer":4,"location":
{"ipRange":"178.25.110.0..178.25.111.255","countryCode":"DE","region":"13",
"city":"Dresden","postalCode":"","latitude":"51.05","longitude":"13.75",
"metroCode":"","areaCode":""},"as":{"ipRange":"178.24.0.0..178.27.255.255",
"ASN":"31334","company":"Kabel Deutschland Vertrieb und Service GmbH"},
"countryWhois":{"ipRange":"178.24.0.0..178.27.255.255","countryCode":"DE",
"country":"Germany"}}
----

=== public network

.public network
[options="header"]
|=======================
|ctx|function      |how|passed
|client | lan client gets IP/netconf via dhcp on br-lan_vpn | on client run ip a, interface connected to ap must have addr in 192.168.2.0/24, nslookup freepackets.org must use one of the DNS servers configured in /etc/config/dhcp |
|client | can connect to internet via lan port | ping freepackets.org, lynx <some_random_address> |
|wlan |AP not password protected | connection without password possible __!!!DANGEROUS DURING DEVELOPMENT!!!__ | 
|wlan |AP SSID set and visible | check networkmanager or ip link set dev wlan0 up; iwlist wlan0 scanning \| grep <ssid> \| wc -l must return 1 |
|client | wlan client gets IP/netconf via dhcp on br-lan_vpn | on client run ip a, interface connected to ap must have addr in 192.168.2.0/24, nslookup freepackets.org must use one of the DNS servers configured in /etc/config/dhcp |
|client | can connect to internet via wlan | ping freepackets.org, lynx <some_random_address> |
|client | if vpn access enabled -> lan client must enter Inet over remote end (eg. Sweden) | lynx mylocation.freepackets.org, see above |
|client | if vpn access disables -> lan client must enter Inet over local ISP | lynx mylocation.freepackets.org, see above |
|client | if vpn access enabled -> wlan client must enter Inet over remote end (eg. Sweden) | lynx mylocation.freepackets.org, see above |
|client | if vpn access disables -> wlan client must enter Inet over local ISP | lynx mylocation.freepackets.org, see above |
|=======================

WARNING: Disable password protection for public AP __AFTER__ all other checks are passed.

=== firewall config

.firewall
[options="header"]
|=======================
|ctx|function      |how|passed
|firewall.user |deletes stock rules | iptables -L -t (filter, nat, mangle raw) should onyl show our rules |
|firewall.user |packet from public net with src != source 192.168.2.0/24 are dropped | on client: interface ip 192.168.5.1, add route via ip route add 192.168.2.0/24 via 192.168.5.1, ping 192.168.2.1 -> drop counter must go up |
|firewall.user |cross subnet packets are dropped | ping 192.168.3.1 -> iptable -L -v -> counter of rule DROP all from 192.168.2.0/24 to 192.168.3.0/24 must go up |
|firewall.user |all packets from br-lan_vpn are marked with 23 |ping from client to world, iptables -L -v -t mangle, counter should go up |
|firewall.user |one basic ip rule for packets with mark 23 is created |ip rule show \| grep "fwmark 0x17" \| wc -l must return 1 |
|firewall.user |postrouting@nat uses chain masq |iptables -L -t nat -v -> postrouting must have a rule with target masq, masq must have at least basic masq rule for all traffic not comming from public subnet, counter must go up |
|firewall.user |public net can not send to 192.168.3.0/24 | ping 192.168.3.1 from client in public subnet must fail |
|firewall.user |private net can access internet| ping freepackets.org (implies working DNS) | 
|firewall.user |drop incomming connections over eth0.2/WAN | ssh to the router from WAN must fail |
|firewall.user |drop ping request over eth0.2/WAN | ping from WAN side must fail |
|firewall.user |public subnet can ping router | ping from public client to 192.168.2.1 |
|firewall.user |public subnet can not connect to router (eg. via ssh) | public subnet client ssh 192.168.2.1 must fail |
|=======================

NOTE: Allowing limited ICMP helps the clients a lot in case of network trouble.

=== final network setup

Public router connected to DSL, internal router connected to a port of the bridge br-lan_direct.

.final network setup
[options="header"]
|=======================
|ctx|function      |how|passed
|internal router | gets address for WAN interface via DHCP from public router | web interface of internal router / logread -f on public router (dnsmasq must log DHCP{OFFER,REQUEST,ACK}) |
|internal client | get network configuration via DHCP from internal router | ip a |
|internal client | can access the Internet via internal router over public router | ping 8.8.8.8, ping freepackets.org, browse the web... |
|internal client | uses direct connection to the internet | mylocation.freepackets.org |
|=======================
